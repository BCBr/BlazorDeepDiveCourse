
<li @key="ToDoTask.Id">
	<div class="row mb-2">
		<div class="col-1">
			@if (ToDoTask.Name.Length>0)
			{
				<input type="checkbox"
					   class="form-check-input"
					   @bind-value="ToDoTask.IsCompleted"
				checked="@ToDoTask.IsCompleted" />
			}
			else
			{
				<input type="checkbox"
					   class="form-check-input"
					   @bind-value="ToDoTask.IsCompleted"
					   checked="@ToDoTask.IsCompleted" disabled/>
			}
			
		</div>
		<div class="col">
			@if (ToDoTask.IsCompleted)
			{
				<input type="text" @bind-value="ToDoTask.Name" class="text-decoration-line-through" disabled>
			}
			else
			{
				<input type="text" @bind-value="ToDoTask.Name" placeholder="What you need to do?" />
			}

		</div>
		<div class="col">
			@if (ToDoTask.IsCompleted)
			{
				<text>Completed at: @ToDoTask.DateCompleted </text>
			}
			else
			{
				<text></text>
			}
		</div>
		<div class="col">
			<button type="button" class="btn btn-danger" @onclick="@(() => { RemoveThisTask(); })"> Delete Task </button>
		</div>
	</div>
</li>

@code {

	[Parameter]
	public TaskToDo ToDoTask { get; set; }

	[Parameter]
	public EventCallback CallUpdateVisual { get; set; }

	private void RemoveThisTask()
	{
		TasksRepository.DeleteTask(ToDoTask.Id);
		CallUpdateVisual.InvokeAsync();
	}
}
